-- database: /Users/rihadvariawa/Desktop/caesar-2series/db/cleaning/world_layoffs/world_layoffs.db
-- Use the â–· button in the top right corner to run the entire file.
CREATE TABLE
    `layoffs_staging` (
        `company` TEXT,
        `location` TEXT,
        `industry` TEXT,
        `total_laid_off` INTEGER,
        `percentage_laid_off` INTEGER,
        `date` DATE,
        `stage` TEXT,
        `country` TEXT,
        `funds_raised_millions` INTEGER
    );

INSERT INTO
    `layoffs_staging`
SELECT
    *
FROM
    `layoffs`;

-- number of rows in the table = 2361
SELECT
    COUNT(*)
FROM
    `layoffs_staging`;

-- 1. remove duplicate rows
-- our dataset has no "Unique Row-ID", (this makes deleting duplicates a challenge) 
-- our dataset starts w/ company
SELECT
    *
FROM
    layoffs_staging;

-- create row_num column, 
-- NOTE date is a keyword, so `date` (keywords are colored purple)
SELECT
    *,
    ROW_NUMBER() OVER (
        PARTITION BY
            company,
            industry,
            total_laid_off,
            percentage_laid_off,
            `date`
    ) AS row_num
FROM
    `layoffs_staging`;

-- create duplicate_cte to identify duplicate rows
-- CTE (Common Table Expression) is a temporary result set
-- you can reference within a SELECT, INSERT, UPDATE, or DELETE statement. 
-- It's like a temporary view that's derived from a query, and 
-- it can be used to simplify complex queries or break down a large query 
-- into smaller, more manageable pieces.
-- A CTE is defined using the WITH keyword, 
-- followed by the name of the CTE,
-- create duplicate_cte to identify duplicate rows
WITH
    duplicate_cte AS (
        SELECT
            *,
            ROW_NUMBER() OVER (
                PARTITION BY
                    company,
                    industry,
                    total_laid_off,
                    percentage_laid_off,
                    `date`
            ) AS row_num
        FROM
            `layoffs_staging`
    )
SELECT
    *
FROM
    duplicate_cte
WHERE
    row_num > 1;

-- lets confirm these are in fact duplicates
SELECT
    *
from
    layoffs_staging
where
    company = 'Oda';

-- what this check does is tells us that THESE are not duplicates
-- ententially this is good practice to follow before removing "duplicate" rows
-- lets partition over ALL cols! = identifies 5 rows as duplicates
WITH
    duplicate_cte AS (
        SELECT
            *,
            ROW_NUMBER() OVER (
                PARTITION BY
                    company,
                    location,
                    industry,
                    total_laid_off,
                    percentage_laid_off,
                    `date`,
                    stage,
                    country,
                    funds_raised_millions
            ) AS row_num
        FROM
            `layoffs_staging`
    )
SELECT
    *
FROM
    duplicate_cte
WHERE
    row_num > 1;

-- now company = 'Oda' does not identify as a duplicate
-- lets do a check again. company = 'Casper', 'Hibob', 'Yahoo' looks like a duplicate
SELECT
    *
from
    layoffs_staging
where
    company = 'Yahoo';

-- we can confirm our previews code above identifies the actual duplicates
-- lets see if we can delete from the duplicate_cte. Returns error, no such table duplicate_cte 
-- lets USE SCRIPT Untitled-2
-- WITH
--     duplicate_cte AS (
--         SELECT
--             *,
--             ROW_NUMBER() OVER (
--                 PARTITION BY
--                     company,
--                     location,
--                     industry,
--                     total_laid_off,
--                     percentage_laid_off,
--                     `date`,
--                     stage,
--                     country,
--                     funds_raised_millions
--             ) AS row_num
--         FROM
--             `layoffs_staging`
--     )
-- DELETE FROM duplicate_cte
-- WHERE
--     row_num > 1;
--  since we cannot delete using the above, we create another table w/ the extra column and delete where there is row_num > 1
-- 2. Standardize the data. Finding issues and fixing them
-- 2.1 find whitespaces, if any and remove (trim). column "company"
-- 2.2 lets look at the industry column. we have a blank cell, we have NULL, crypto is mentioned 3x
-- 2.3 lets look at the location column. LOOKS GooD
-- 2.4 lets look at country column. Look for spwcial characters, if any, we have a period after United Stated
-- 2.5 look at column Dtypes
-- 2.6 remove unwanted columns
-- remove row_num column
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;

-- preview layoffs_staging2
SELECT
    *
from
    layoffs_staging2;

-- 2.1 find whitespaces, "compnay" column
SELECT DISTINCT
    company
FROM
    layoffs_staging2
ORDER BY
    company;

-- remove whitespaces using trim()
-- SELECT DISTINCT
--     (trim(company))
-- FROM
--     `layoffs_staging2`
-- ORDER BY
--     (trim(company));
-- lets remove whitespaces using trim() 
-- preview old and new col
SELECT
    company,
    trim(company)
FROM
    layoffs_staging2
ORDER BY
    trim(company);

-- lets update our table with the new column values
UPDATE layoffs_staging2
SET
    company = trim(company);

-- preview table
SELECT
    *
FROM
    layoffs_staging2;

-- 2.2 lets look at the "industry" column. Crypto is mentioned 3x
SELECT DISTINCT
    industry
FROM
    layoffs_staging2
ORDER BY
    industry;

-- check, if their is anything disctinct/special about crypto industry. Nothing special, so lets update table
SELECT
    industry
FROM
    layoffs_staging2
where
    industry like 'Crypto%';

-- update table
UPDATE layoffs_staging2
SET
    industry = 'Crypto'
WHERE
    industry like 'Crypto%';

-- 2.3 lets look at the location column. LOOKS GooD
SELECT DISTINCT
    location
FROM
    layoffs_staging2
ORDER BY
    1;

-- 2.4 lets look at country column. we have a period after United Stated., and United States is 2X, which should not be there! Lets check 
SELECT DISTINCT
    country
FROM
    layoffs_staging2
ORDER BY
    1;

-- -- check, if their is anything disctinct/special about "United States." country! Nothing special, so lets update table
SELECT
    country
FROM
    layoffs_staging2
where
    country like 'United States%';

-- update table
UPDATE layoffs_staging2
SET
    country = 'United States'
WHERE
    country like 'United States%';

-- check if change was effected. Yip and duplicate removed
SELECT DISTINCT
    country
FROM
    layoffs_staging2
ORDER BY
    1;

-- for time-series analysis, lets look at "date" column
-- "date" column is a TEXT dtype
SELECT
    `date`
FROM
    layoffs_staging2;

-- using SQLite you cannot change the data type of a column, 
-- you create a new column w/ the desired Dtype, 
-- then drop the old column. NOTE AT THE BEGINNING I UODATED THE DTYPE FOR EACH COL
-- ALTER TABLE layoffs_staging2
-- ADD COLUMN `new_date` date;
-- copy data from "date" column to new "new_date" column
-- UPDATE layoffs_staging2
-- SET
--     `new_date` = `date`;
-- preview old and new "date" column
-- SELECT
--     `date`,
--     `new_date`
-- FROM
--     layoffs_staging2;
-- drop old "date" column
-- ALTER TABLE layoffs_staging2
-- DROP COLUMN `date`;
-- 3. handling NULL and blank values
-- 3.1 check for NULL values. Returns a blank table...?
SELECT
    *
FROM
    layoffs_staging2
WHERE
    company IS NULL
    OR location IS NULL
    OR industry IS NULL
    OR total_laid_off IS NULL
    OR percentage_laid_off IS NULL
    OR `date` IS NULL
    OR stage IS NULL
    OR country IS NULL
    OR funds_raised_millions IS NULL;

-- another way. Returns blank table...
SELECT
    *
FROM
    layoffs_staging2
WHERE
    total_laid_off is null
    AND percentage_laid_off is null;

-- 3.2 check for blank values. Returns a blank table...
SELECT DISTINCT
    industry
FROM
    layoffs_staging2
WHERE
    industry is null
    or industry = '';

-- try. Return a table w/ values
SELECT DISTINCT
    *
FROM
    layoffs_staging2
WHERE
    industry is null
    or industry = '';

-- lets try to populate blamk values
-- lets look at company = 'Airbnb'. we have travel in Airbnb in the industry column and another record for Airbnb is blank
SELECT
    *
FROM
    layoffs_staging2
WHERE
    company = 'Airbnb';

-- fill blanks...
-- SELECT
--     *
-- FROM
--     layoffs_staging2 t1
--     JOIN layoffs_staging2 t2 ON t1.company = t2.company
-- WHERE
--     (
--         t1.industry is null
--         or t1.industry = ''
--     )
--     AND t2.industry is not null;
-- OR
SELECT
    t1.industry,
    t2.industry
FROM
    layoffs_staging2 t1
    JOIN layoffs_staging2 t2 ON t1.company = t2.company
WHERE
    (
        t1.industry is null
        or t1.industry = ''
    )
    AND t2.industry is not null;

-- set blanks to null
UPDATE layoffs_staging2
SET
    industry = NULL
WHERE
    (
        industry is null
        or industry = ''
    );

-- update industry column where blank...??
UPDATE layoffs_staging2
SET
    industry = t2.industry
FROM
    layoffs_staging2 t1
    JOIN layoffs_staging2 t2 ON t1.company = t2.company
WHERE
    (
        t1.industry is null
        or t1.industry = ''
    )
    AND t2.industry is not null;

-- test. DID NOT WORK
SELECT
    *
FROM
    layoffs_staging2
WHERE
    company = 'Airbnb';
