-- database: /Users/rihadvariawa/Desktop/caesar-2series/SQLite/chinook.db

-- Use the ▷ button in the top right corner to run the entire file.

SELECT * FROM tracks;

-- database: /Users/rihadvariawa/Desktop/caesar-2series/SQLite/chinook.db
-- Use the ▷ button in the top right corner to run the entire file.
SELECT
    *
FROM
    tracks;

-- To get data from the tracks table such as 
-- trackid, track name, composer, and unit price

SELECT
    trackid,
    name,
    composer,
    unitprice
FROM
    tracks;

-- get data from name, milliseconds, and album id columns from tracks table
SELECT
    name,
    milliseconds,
    albumid
FROM
    tracks;

-- sort the result set based on AlbumId column in ascending order
SELECT
    name,
    milliseconds,
    albumid
FROM
    tracks
ORDER BY
    albumid;

-- sorted result by the Milliseconds column in descending order
SELECT
    name,
    milliseconds,
    albumid
FROM
    tracks
ORDER BY
    albumid,
    milliseconds DESC;

-- sorts the tracks by both albumid (3rd column) and milliseconds (2nd column) in ascending order
SELECT
    name,
    milliseconds,
    albumid
FROM
    tracks
ORDER BY
    3,2;

-- use the ORDER BY clause to sort tracks by composers
SELECT
    trackid,
    name,
    composer
FROM
    tracks
ORDER BY
    composer;

-- use the NULLS LAST option to place NULLs after other values
SELECT
    trackid,
    name,
    composer
FROM
    tracks
ORDER BY
    composer NULLS LAST;

--  get data from the city column of the customers table
SELECT
    city,
    country
FROM
    customers
ORDER BY city ASC;

-- remove duplicate rows, using the DISTINCT clause
SELECT DISTINCT
    city
FROM
    customers
ORDER BY city;

-- SELECT DISTINCT on multiple columns
-- The following statement finds cities and countries of all customers
SELECT DISTINCT
    city,
    country
FROM
    customers
ORDER BY
    country;

-- returns the names of companies of customers from the customers table
SELECT DISTINCT -- only return one row per
    company
FROM
    customers;

-- uses the WHERE clause the equality operator to find all the tracks in the album id 1
SELECT
    name,
    milliseconds,
    bytes,
    albumid
FROM
    tracks
WHERE
    albumid = 1;

-- get tracks of the album 1 that have the length greater than 200,000 milliseconds
SELECT
    name,
    milliseconds,
    bytes,
    albumid
FROM
    tracks
WHERE
    albumid = 1
    AND milliseconds > 250000;

--  find which tracks were composed by Smith, you use the LIKE operator
SELECT
    name,
    albumid,
    composer
FROM
    tracks
WHERE
    composer LIKE '%Smith%'
ORDER BY
    albumid;

-- find tracks that have media type id is 2 or 3, you use the IN operator
SELECT
    name,
    albumid,
    mediatypeid
FROM
    tracks
WHERE
    mediatypeid IN (2, 3)
ORDER BY
    albumid;

-- get the first 10 rows in the tracks table
SELECT
    trackid,
    name
FROM
    tracks
LIMIT
    10;

-- get 10 rows starting from the 11th row in the tracks table
SELECT
    trackid,
    name
FROM
    tracks
LIMIT
    10
OFFSET
    10;

-- get the top 10 biggest tracks by size (bytes)
SELECT
    trackid, name, bytes
FROM
    tracks
ORDER BY
    bytes DESC
LIMIT
    10;

-- get the 5 shortest tracks, you sort the tracks by the length
SELECT
    trackid, name, milliseconds
FROM
    tracks
ORDER BY
    milliseconds
LIMIT
    5;

-- get the second-longest track, the third smallest track
SELECT
    trackid, name, milliseconds
FROM
    tracks
ORDER BY
    milliseconds DESC
LIMIT
    2 OFFSET 1; -- get the second record when sorted in descending order

-- gets the third smallest track on the tracks table
SELECT
    trackid, name, bytes
FROM
    tracks
ORDER BY
    bytes
LIMIT
    1 OFFSET 2; -- get the third record when sorted in ascending order

-- SQLite BETWEEN operator examples

-- finds invoices whose total is between 14.96 and 18.86
SELECT 
    invoiceid, billingaddress, total
FROM
    invoices
WHERE
    total BETWEEN 14.96 AND 18.86
ORDER BY
    total;

-- find the invoices whose total are not between 1 and 20
SELECT
    invoiceid, billingaddress, total
FROM
    invoices
WHERE
    total NOT BETWEEN 1 AND 20
ORDER BY
    total
LIMIT
    10;

--  finds invoices whose invoice dates are from January 1 2010 and January 31 2010
SELECT
    invoiceid, invoicedate
FROM
    invoices
WHERE
    invoicedate BETWEEN '2010-01-01' AND '2010-01-31'
ORDER BY
    invoicedate;